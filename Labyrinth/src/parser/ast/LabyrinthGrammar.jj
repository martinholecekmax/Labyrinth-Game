/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LabyrinthGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
               
                 
  JDK_VERSION = "1.8";
                           
                                           
                              
                                  
}
PARSER_BEGIN(LabyrinthGrammar)package parser.ast;

public class LabyrinthGrammar/*@bgen(jjtree)*/implements LabyrinthGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTLabyrinthGrammarState jjtree = new JJTLabyrinthGrammarState();

/*@egen*/  
}PARSER_END(LabyrinthGrammar)
SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN [IGNORE_CASE] : /* RESERVED WORDS AND LITERALS */
{
  < IF: "IF" >
| < ELSE: "ELSE" >
| < FOR: "FOR" >
| < WHILE: "WHILE" >
| < WRITE: "WRITE" >
| < FN: "FN" >
| < RETURN: "RETURN" >
| < OR: "OR" >
| < AND: "AND" >
| < NOT: "NOT" >
| < TRUE: "TRUE" >
| < FALSE: "FALSE" >
| < QUIT: "QUIT" >
| <	MOVE_LEFT: "LEFT" >
| <	MOVE_RIGHT: "RIGHT" >
| <	MOVE_DOWN: "DOWN" >
| <	MOVE_UP: "UP" >
| <	SHOOT: "FIRE" >
| <	KEYBOARD: "KEYBOARD"	>
| < ON: "ON" >
| < OFF: "OFF" >
| < FREEZE: "FREEZE" >
| < ANSWER: "ANSWER" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
     ( 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
     )
   | (
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
     )
  >
}

TOKEN : /* IDENTIFIERS */
{
  <  IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"#")* >
| < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < PP: "++" >
| < MM: "--" >
}

TOKEN : /* OPERATOR SYMBOLS */
{
  < ASSIGN: "=" >
| < PEQ: "+=" >
| < MEQ: "-=" >
| < UEQ: "@=" >
| < EQ: "==" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < HOOK: "?" >
| < COLON: ":" >
| < PLUS: "+" >
| < SUBT: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/

ASTCode code()       :
{/*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Code */
                              try {
/*@egen*/
     			      statement() ( statement() )* <EOF>/*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                  }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
                              } catch (Throwable jjte000) {
                                if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte000;
                                }
                                if (jjte000 instanceof ParseException) {
                                  throw (ParseException)jjte000;
                                }
                                throw (Error)jjte000;
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
                              }
/*@egen*/
}

void statement()            :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
                                        try {
/*@egen*/
				 	LOOKAHEAD(2) assignment()
				|   LOOKAHEAD(3) arraydef()
				| 	LOOKAHEAD(3) arrayassign() 
				|	fndef()
				|	block()
				|	ifstatement()	
				|	forloop()
				| 	whileloop()
				|	write()
				|	call()
				| 	quit()
				|   command()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void arraydef()           :
{/*@bgen(jjtree) ArrayDef */
  ASTArrayDef jjtn000 = new ASTArrayDef(JJTARRAYDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayDef */
                                        try {
/*@egen*/
					identifier() "[" "]" "=" arrayparamlist()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/ 
}

void arrayparamlist()                 :
{/*@bgen(jjtree) ArrayParamList */
  ASTArrayParamList jjtn000 = new ASTArrayParamList(JJTARRAYPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayParamList */
                                        try {
/*@egen*/
					"{" [ expression()  ( "," expression()   )* ] "}"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void arrayassign():
{}
{
  					identifier() "[" expression()  "]" "="/*@bgen(jjtree) #ArrayAssignment( 3) */
                                                                               {
                                                                                 ASTArrayAssignment jjtn001 = new ASTArrayAssignment(JJTARRAYASSIGNMENT);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
                                                                               }
                                                                               try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                                                               } catch (Throwable jjte001) {
                                                                                 if (jjtc001) {
                                                                                   jjtree.clearNodeScope(jjtn001);
                                                                                   jjtc001 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte001 instanceof RuntimeException) {
                                                                                   throw (RuntimeException)jjte001;
                                                                                 }
                                                                                 if (jjte001 instanceof ParseException) {
                                                                                   throw (ParseException)jjte001;
                                                                                 }
                                                                                 throw (Error)jjte001;
                                                                               } finally {
                                                                                 if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001,  3);
                                                                                 }
                                                                               }
/*@egen*/                    
}

void quit()       :
{/*@bgen(jjtree) Quit */
  ASTQuit jjtn000 = new ASTQuit(JJTQUIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Quit */
                                        try {
/*@egen*/
					< QUIT >/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void block()        :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
                                        try {
/*@egen*/
					"{" ( statement() )* "}"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void parmlist()           :
{/*@bgen(jjtree) Parmlist */
  ASTParmlist jjtn000 = new ASTParmlist(JJTPARMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parmlist */
                                        try {
/*@egen*/
					"(" [ identifier() ( "," identifier() )* ] ")"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void fnbody()         :
{/*@bgen(jjtree) FnBody */
  ASTFnBody jjtn000 = new ASTFnBody(JJTFNBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FnBody */
                                        try {
/*@egen*/
					( statement() )*/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/ 
}

void fndef()        :
{/*@bgen(jjtree) FnDef */
  ASTFnDef jjtn000 = new ASTFnDef(JJTFNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FnDef */
                                        try {
/*@egen*/
					<FN> identifier() parmlist() "{" 
						fnbody()
						[ <RETURN> returnexpr() {jjtn000.fnHasReturn = true;} ] 
					"}"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void returnexpr()                   :
{/*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnExpression */
                                        try {
/*@egen*/
					expression()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void assignment() :
{}
{
					identifier() "="/*@bgen(jjtree) #Assignment( 2) */
                                                         {
                                                           ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte001;
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             throw (ParseException)jjte001;
                                                           }
                                                           throw (Error)jjte001;
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
                                                         }
/*@egen*/               
}

void ifstatement()              :
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
                                        try {
/*@egen*/
  					<IF> "(" expression() ")" statement() 
  					[ LOOKAHEAD(1) <ELSE> statement() {jjtn000.ifHasElse = true;} ]/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void whileloop()            :
{/*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileLoop */
                                        try {
/*@egen*/
  					<WHILE> "(" expression() ")" statement()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void forloop()          :
{/*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForLoop */
                                        try {
/*@egen*/
  					<FOR> "(" assignment() ";" expression() ";" assignment() ")" statement()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void write() :
{}
{
					<WRITE>/*@bgen(jjtree) #Write( 1) */
                                                {
                                                  ASTWrite jjtn001 = new ASTWrite(JJTWRITE);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte001;
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    throw (ParseException)jjte001;
                                                  }
                                                  throw (Error)jjte001;
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  1);
                                                  }
                                                }
/*@egen*/          
}

void call()       :
{/*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
                                        try {
/*@egen*/
					identifier() arglist()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void arglist()          :
{/*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
                                        try {
/*@egen*/
					"(" [ expression() ] ( "," expression() )* ")"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

//
//	Commands
//

void command() :
{}
{
                   	moveleft()
				| 	moveright()
				| 	movedown()
				| 	moveup()
				|	shoot()
				| 	movable()
				| 	freeze()
				| 	answer()
}

void movable():
{}
{
  					< KEYBOARD > "(" keyboardSet() ")"
}

void keyboardSet():
{}
{/*@bgen(jjtree) KeyboardOn */
        {
          ASTKeyboardOn jjtn001 = new ASTKeyboardOn(JJTKEYBOARDON);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	< ON >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/	           
 |/*@bgen(jjtree) KeyboardOff */
        {
          ASTKeyboardOff jjtn002 = new ASTKeyboardOff(JJTKEYBOARDOFF);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ 	< OFF >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/	            
}

void freeze()        :
{/*@bgen(jjtree) Freeze */
  ASTFreeze jjtn000 = new ASTFreeze(JJTFREEZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Freeze */
  try {
/*@egen*/
  < FREEZE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void answer():
{}
{
  < ANSWER > "(" expression()/*@bgen(jjtree) #Answer( 1) */
                              {
                                ASTAnswer jjtn001 = new ASTAnswer(JJTANSWER);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
                              }
/*@egen*/           
}

void moveleft()          :
{/*@bgen(jjtree) MoveLeft */
  ASTMoveLeft jjtn000 = new ASTMoveLeft(JJTMOVELEFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveLeft */
                                        try {
/*@egen*/
					<MOVE_LEFT>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void moveright()           :
{/*@bgen(jjtree) MoveRight */
  ASTMoveRight jjtn000 = new ASTMoveRight(JJTMOVERIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveRight */
                                        try {
/*@egen*/
					<MOVE_RIGHT>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void movedown()          :
{/*@bgen(jjtree) MoveDown */
  ASTMoveDown jjtn000 = new ASTMoveDown(JJTMOVEDOWN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveDown */
                                        try {
/*@egen*/
					<MOVE_DOWN>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void moveup()        :
{/*@bgen(jjtree) MoveUp */
  ASTMoveUp jjtn000 = new ASTMoveUp(JJTMOVEUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveUp */
                                        try {
/*@egen*/
					<MOVE_UP>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void shoot():
{}
{
					<SHOOT>/*@bgen(jjtree) #Shoot( 1) */
                                                {
                                                  ASTShoot jjtn001 = new ASTShoot(JJTSHOOT);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte001;
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    throw (ParseException)jjte001;
                                                  }
                                                  throw (Error)jjte001;
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  1);
                                                  }
                                                }
/*@egen*/          
}

//
// Expressions
//

void expression() :
{}
{
                  or_expression()
}

void or_expression() : 
{} 
{ 
			      and_expression() ( <OR>/*@bgen(jjtree) #Or( 2) */
                                                      {
                                                        ASTOr jjtn001 = new ASTOr(JJTOR);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*/ and_expression()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte001;
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          throw (ParseException)jjte001;
                                                        }
                                                        throw (Error)jjte001;
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
                                                      }
/*@egen*/        )* 
}

void and_expression() : 
{} 
{ 
			      compare_expression() ( <AND>/*@bgen(jjtree) #And( 2) */
                                                           {
                                                             ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                           }
                                                           try {
/*@egen*/ compare_expression()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte001;
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               throw (ParseException)jjte001;
                                                             }
                                                             throw (Error)jjte001;
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
                                                           }
/*@egen*/         )*
}

void compare_expression() : 
{} 
{ 
                              add_expression() [
                                 "=="/*@bgen(jjtree) #CompEqual( 2) */
                                       {
                                         ASTCompEqual jjtn001 = new ASTCompEqual(JJTCOMPEQUAL);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/  add_expression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/              
                               | "<>"/*@bgen(jjtree) #CompNequal( 2) */
                                      {
                                        ASTCompNequal jjtn002 = new ASTCompNequal(JJTCOMPNEQUAL);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ add_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/               
                               | ">="/*@bgen(jjtree) #CompGTE( 2) */
                                      {
                                        ASTCompGTE jjtn003 = new ASTCompGTE(JJTCOMPGTE);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                      }
                                      try {
/*@egen*/ add_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte003;
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          throw (ParseException)jjte003;
                                        }
                                        throw (Error)jjte003;
                                      } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
                                      }
/*@egen*/            
                               | "<="/*@bgen(jjtree) #CompLTE( 2) */
                                      {
                                        ASTCompLTE jjtn004 = new ASTCompLTE(JJTCOMPLTE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
                                      }
                                      try {
/*@egen*/ add_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte004;
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          throw (ParseException)jjte004;
                                        }
                                        throw (Error)jjte004;
                                      } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
                                      }
/*@egen*/            
                               | ">"/*@bgen(jjtree) #CompGT( 2) */
                                      {
                                        ASTCompGT jjtn005 = new ASTCompGT(JJTCOMPGT);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*/  add_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte005;
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          throw (ParseException)jjte005;
                                        }
                                        throw (Error)jjte005;
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
                                      }
/*@egen*/           
                               | "<"/*@bgen(jjtree) #CompLT( 2) */
                                      {
                                        ASTCompLT jjtn006 = new ASTCompLT(JJTCOMPLT);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
                                      }
                                      try {
/*@egen*/  add_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte006) {
                                        if (jjtc006) {
                                          jjtree.clearNodeScope(jjtn006);
                                          jjtc006 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte006 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte006;
                                        }
                                        if (jjte006 instanceof ParseException) {
                                          throw (ParseException)jjte006;
                                        }
                                        throw (Error)jjte006;
                                      } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
                                      }
/*@egen*/           
                               ]
}

void add_expression() : 
{} 
{
                              mul_expression() (
                                  "+"/*@bgen(jjtree) #Add( 2) */
                                       {
                                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/  mul_expression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/        
                                | "-"/*@bgen(jjtree) #Subtract( 2) */
                                       {
                                         ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*/  mul_expression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte002;
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           throw (ParseException)jjte002;
                                         }
                                         throw (Error)jjte002;
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
                                       }
/*@egen*/             
                              )*
}

void mul_expression() : 
{} 
{ 
			      			  unary_expression() ( 
                                  "*"/*@bgen(jjtree) #Times( 2) */
                                      {
                                        ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
                                      }
/*@egen*/          
                                | "/"/*@bgen(jjtree) #Divide( 2) */
                                      {
                                        ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/           
                              )*
}

void unary_expression() :
{}
{
                              <NOT>/*@bgen(jjtree) #UnaryNot( 1) */
                                    {
                                      ASTUnaryNot jjtn001 = new ASTUnaryNot(JJTUNARYNOT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
                                    }
/*@egen*/             
                            | "+"/*@bgen(jjtree) #UnaryPlus( 1) */
                                    {
                                      ASTUnaryPlus jjtn002 = new ASTUnaryPlus(JJTUNARYPLUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*/   unary_expression()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte002;
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        throw (ParseException)jjte002;
                                      }
                                      throw (Error)jjte002;
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  1);
                                      }
                                    }
/*@egen*/              
                            | "-"/*@bgen(jjtree) #UnaryMinus( 1) */
                                    {
                                      ASTUnaryMinus jjtn003 = new ASTUnaryMinus(JJTUNARYMINUS);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
                                    }
                                    try {
/*@egen*/   unary_expression()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte003) {
                                      if (jjtc003) {
                                        jjtree.clearNodeScope(jjtn003);
                                        jjtc003 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte003 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte003;
                                      }
                                      if (jjte003 instanceof ParseException) {
                                        throw (ParseException)jjte003;
                                      }
                                      throw (Error)jjte003;
                                    } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  1);
                                      }
                                    }
/*@egen*/               
                            | primary_expression()
}

void primary_expression() : 
{}
{
                              literal()
                            | LOOKAHEAD(2) fn_invoke()
                            | LOOKAHEAD(2) array_invoke()
                            | dereference()
                            | "(" expression() ")"
}

void array_invoke()              :
{/*@bgen(jjtree) ArrayInvoke */
  ASTArrayInvoke jjtn000 = new ASTArrayInvoke(JJTARRAYINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayInvoke */
                                        try {
/*@egen*/
					identifier() "[" integer() "]"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/
}

void fn_invoke()           :
{/*@bgen(jjtree) FnInvoke */
  ASTFnInvoke jjtn000 = new ASTFnInvoke(JJTFNINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FnInvoke */
                                                        try {
/*@egen*/
							identifier() arglist()/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte000;
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            throw (ParseException)jjte000;
                                                          }
                                                          throw (Error)jjte000;
                                                        } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
                                                        }
/*@egen*/
}

void literal() :
{}
{
							  integer()
                            | character()							  	
							| rational()
							| bool()
}

void identifier()             :
{/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void dereference()              :
{/*@bgen(jjtree) Dereference */
 ASTDereference jjtn000 = new ASTDereference(JJTDEREFERENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Dereference */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void character()            :
{/*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Character */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void integer()          : 
{/*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/ 
	t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void rational()           : 
{/*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Rational */
        try {
/*@egen*/ 
	t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.tokenValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void bool() : 
{} 
{/*@bgen(jjtree) True */
                              {
                                ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ 
			      <TRUE>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/      
                |/*@bgen(jjtree) False */
                  {
                    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/       
}
